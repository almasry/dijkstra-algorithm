package com.thoughtworks.trains.ProblemDomain.Factory;

import com.thoughtworks.trains.Exception.InvalidProblemStatementException;
import com.thoughtworks.trains.ProblemDomain.City;
import com.thoughtworks.trains.ProblemDomain.Edge;
import com.thoughtworks.trains.ProblemDomain.Respository.CityRepository;
import com.thoughtworks.trains.ProblemDomain.Respository.EdgeRepository;

import java.util.ArrayList;

public class ProblemFactory {

    private EdgeRepository edgeRepository;

    private CityRepository cityRepository;

    private ArrayList<String> routeStrings;

    /**
     * @param edgeStrings the string of edges as in: (AB1, AC2, DE3, FD5, .. )
     * @throws InvalidProblemStatementException
     */
    public ProblemFactory(ArrayList<String> edgeStrings) throws InvalidProblemStatementException
    {
        this.routeStrings = edgeStrings;
        this.edgeRepository = new EdgeRepository();
        this.cityRepository = new CityRepository();

        this.generateProblemInputs();
    }

    /**
     * @throws InvalidProblemStatementException
     */
    private void generateProblemInputs() throws InvalidProblemStatementException
    {
        for (String routeString : this.routeStrings) {
            ArrayList<City> cities = this.getEdgeCities(routeString);

            this.createEdges(cities, routeString);
        }
    }

    /**
     * @param routeString
     * @return
     */
    private ArrayList<City> getEdgeCities(String routeString)
    {
        City startCity = new City(Character.toString(routeString.charAt(0))) ;
        City endCity = new City(Character.toString(routeString.charAt(1))) ;

        this.cityRepository.addCity(startCity);
        this.cityRepository.addCity(endCity);

        ArrayList<City> cities = new ArrayList<>();

        cities.add(startCity);
        cities.add(endCity);

        return cities;
    }

    /**
     * @param cities
     * @param edgeString
     * @throws InvalidProblemStatementException
     */
    private void createEdges(ArrayList<City> cities, String edgeString) throws InvalidProblemStatementException
    {
        StringBuilder stringBuilder = new StringBuilder(edgeString);

        stringBuilder.delete(0,2);

        City startCity = cities.get(0);
        City endCity   = cities.get(1);

        int edgeLength = Integer.parseInt(stringBuilder.toString());

        Edge edge = new Edge(startCity, endCity, edgeLength);

        for(Edge e : this.edgeRepository.getAllEdges()) {

            String nameOfStartCity = e.getStart().getCityName();
            String nameOfEndCity   = e.getEnd().getCityName();

            // making sure the edge doesn't start and end at the same city
            if(nameOfStartCity.equals(nameOfEndCity))
            {
                throw new InvalidProblemStatementException(edgeString+ " : edge can't start and end at the same city ..");
            }

            // making sure the edge is not registered before (eg:  you can't have AB5 and AB8 at the same problem)
            if(nameOfStartCity.equals(startCity.getCityName()) && nameOfEndCity.equals(endCity.getCityName()))
            {
                throw new InvalidProblemStatementException("Edge "+edgeString+" can't be registered twice !");
            }
        }
        this.edgeRepository.addEdge(edge);
    }

    /**
     * @return retrieves the repository of edges generated by the problem factory
     */
    public EdgeRepository getEdgeRepository() {
        return edgeRepository;
    }

    /**
     * @return retrieves the repository of cities generated by the problem factory
     */
    public CityRepository getCityRepository() {
        return cityRepository;
    }
}
